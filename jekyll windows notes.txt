19:41 2/21/2019
using video:
https://www.youtube.com/watch?v=LfP7Y9Ja6Qc&index=3&list=PLLAZ4kZ9dFpOPV5C5Ay0pHaa0RJFhcmcB
(third video in a long playlist, 1st was "what is jekyll" and second was for mac os so i skipped it


first thing is the "ruby gems package manager"

I downloaded the "without devkit" edition, 2.5.1-1 x64
https://rubyinstaller.org/downloads/

the video says to let it associate rb and rbw extensions so i'll let it

console window opens after installing it
video says to install all three in order
run 1 and uncheck "run msys2 64bit now" - okay that's proably obvious
i'm doing on this guest wifi on my toughbook so it ended up taking a while...
3:00 min in


run 2
updates all the ruby related packages
apparently this is installing linux/unix libraries and pacman/bash/mintty etc on to system

run 3
mingw etc development toolchain

open cmd prompt
--> confirm everything is working correctly
ruby -v confirms rub is installed and prints version
gem -v does same for gem installed/version printout

next:
gem install jekyll bundler 
[I changed to my local drive repo to run this command, not sure if that was necessary: 
no additional files in that folder so not necessary]

should say "2 gems installed" -- actually it came 26 gems installed. maybe i just misheard that.

jekyll -v should print out something like:
jekyll 3.6.0 [v3.8.5 in my case. it has been 18 months since the video]

------------------------------------------------------

tutorial part 4 for video series above
this is how to 

jekyll new [name of site]
e.g.
jekyll new my-new-blog

creates a bunch default files or "scaffolding"
for this part:
ended up creating repo on github first called "jekyll-windows-test"
then cloning that to local drive in my repo folder - this is an empty folder with just .git subfolder 
and a readme.md file
then at CMD shell one level up/in repo folder ran the command with "--force" to make it create the 
scaffholding in this existing repo folder
"jekyll new jekyll-windows-test --force"
the --force is to make it work into a non-empty folder
and it did work as far as i can tell




bundle exec jekyll serve
for first time running it
after that just 
"jekyll serve"
can see site at localhost:4000
this worked exactly as described
just a web server with a "ctrl+c to stop server" message

in directory structure
there is _posts folder
also
_site
which seems to be the "root" of the site - finished/final version

_config.yml file - the settigns for jekyll web site
atrributes for site
also "gemfile" - used to store depencies for site
the "minima" is a reference to default theme
can also specify plugins etc

------------------------------------------------------

tutorial part 5 for video series above

"front matter" in jekyll

contains information about pages
like title or date written
information about each of pages

for instance:
---
layout: post
title:  "Welcome to Jekyll!"
date:   2019-02-21 20:45:05 -0800
categories: jekyll update
---
in the .markdown file
can be used to get information etc.

Note from long after this video was viewed:
I tried to switch the "hacker" theme but it would't show the posts
so i switched back to the default "minima" theme and it showed everything
except the posts
I went throught the git history with github and by changing one file a time back
to the "inital commit" found that 
index.md
has to have the
layout: home
line, at lest for minima. that was only thing making the posts not show
on the home page of the minima themed version

------------------------------------------------------

tutorial part 6 for video series above

this part 6 convers create blog posts in the _posts folder
the naming convention comes int he form:
2019-02-21-welcome-to-jekyll.markdown
can also just use .html instead of markdown - either works
the most important part is including the date at the front then the title for the rest of the title
and apparently both .md and .markdown work for extensions
I find out by experimenting that setting the file to a future date doesn't auto-show up. 
Although perhaps it would eventually show up on the main page as an entry

the first step for any new post file should be adding the "front matter" inside those three dashes ---
above/below it
I gather this is a lot like meta data only it matters quite a lot to tell jekyll how to display the content
layout: post
is for posts - custom layouts can be created/used though
The 
title:
front matter over rides the title of the entry. By default it would use the info from the file's name
for instance the file
2019-02-22-first-example-blogpost.md
would show up with the title "First Example Blogpost"
without that title: entry
while 
title:  "Welcome to my newest blog"
would change the title to "Welcome to my newest blog"
These are "front matter variables"

subfolders can be created under the _posts folder

------------------------------------------------------

tutorial part 7

all about "drafts"

create a "_drafts" folder - same level as the _posts folder

any md file in that _drafts folder will be a work in progress
won't show up directly in "posts" section of page
to see these pages use the alt jekyl server command:

jekyll serve --draft

note: both "serve" and "server" actually should work

Even though I got this working on the win 7 toughbook correctly, i can't seem to get it working on 
win 10/alienware with the normal "jekyll server"
It does seem towrk with the entire 

bundle exec jekyll server --draft
as well as 
bundle exec jekyll server 

And this does work: write a draft in the _drafts with normal front matter with layout: post
running the above with --draft will show the draft as an option 
and will be hidden without that --draft option
naming drafts does not have to be in the year-months-day format file name
but would have have to be named that way when moved the _posts folder

------------------------------------------------------

tutorial part 8

"posts" versus "pages"

such as about page

create new file on "root" of site e.g. not in _posts folder or anything
and add some frontmatter with the standard
front/end ---
can use layout: "page" instead of post
and have to specify title since it's not necesarily pre-defined
and that title actually did show up to the right of "about" in the main 
site page

------------------------------------------------------

tutorial part 9

all about "permalinks"

notes that the 
_site
folder stores finished complete site
it's a folder structure based on page file names and front matter
in the sample URL
http://127.0.0.1:4000/jekyll/update/2019/02/21/welcome-to-jekyll.html
the "update" is the category defined in the front matter
and the HTML file is defined by the title
and the data stamp is also defined
so a permalink definition would give it a more static location that wouldn't be
broken if the category or another detail were changed later

can define a permalink in the front matter with something such as
permalink: "/my-new-url/"
this will override the generated URL as mentioned

can also use
permalink: /:categories
to use a different variable

or /categories:/:year/:month:/:day/:title
and can also switch these variable around
as well as using a custom extension like title.html for instance

------------------------------------------------------

tutorial part 10

"front matter defaults"

defined in config.yaml file

a new post file won't have any formatting etc. without the 
front matter between the --- lines
in order define some constants that will be consistent, can use 
the defaults in the
_config.yml
file

start with the 
defaults:
i changed my _config.yml file to reflect changes below,
must stop/start jekyll server 
defaults:
  -
    scope:
      path: ""
      values:
        layout: "post"

The above was making the jekyll server complain of 
invalid values, but below for whatever reason did work:

defaults:
  -
    scope:
      path: "" # an empty string here means all files in the project
      # type: "posts" # previously `post` in Jekyll 2.2.
    values:
      layout: "post"
      #type: posts # theoretically can use this value down here for non-posts like about

above works even better since it uses that post name portion of the file name 
to insert a page title

-------
hypothetical downside to doing it this way is that non-post pages like about.md
will go back to not having a layout defintion but instead posts layout instead of 
page layout

------------------------------------------------------

tutorial part 11

all about themes

default theme is minima

controlled in _config.yml
also the "gemfile" file

ruby gems is good place to start for themes

search "jekyll-theme"
in the sample theme called "jekyll-theme-hacker"
https://github.com/pages-themes/hacker
no various layouts are defined, only a "default.html"
actually since this video apparently there's a "post.html"
in any case had to modify that layout: line to say "default"
instead of page or post etc

I verified this hacker theme was installed with command:
bundle info jekyll-theme-hacker

if you don't go in and change that layout: line in the front matter 
the page will come up blank when refreshed

in gem file added line:
  gem "jekyll-theme-hacker"

and in the _config.yml file
commented out current theme line and put in line:
theme: jekyll-theme-hacker

------------------------------------------------------


tutorial part 12: all about layouts

The theme defines the layouts for different pages

variable laytout will use "post"
and on abot page uses "page"
defines laytout for posts/pages on layout

to create own layout
create new folder like _layout
create new file in that folder
like posts.html
generally layouts should be defined in html

so if that post.html file contained only
<h1>This is a post</h1>
and i clicked a post link it would just up with those words
and indeed that is all it says

below that can use 
{{ content }}

this is placeholder for current blog posts, a special variable

can also override page layout:
create page.html in same _layouts folder
called page.html
and use the same sort of method

with {{ content }}

I made page.html with this:
<h1>This is a page</h1>

<hr>

{{ content }}

when clicking "about" link it has my H1 line, an hr and 
"This is the base Jekyll theme. You can find out more info about customizing your Jekyll theme, as well as basic Jekyll usage documentation at jekyllrb.com"
along with some other basic info
so this is obviously where that is

next section of video is "custome layouts"

I'll just make a random file name with some similar content to above:
under "_layouts"
created "morecontent.html"
and pasted in:

<h1>This is more content</h1>

<hr>

{{ content }}


If I then go over to a blog post and change the layout: line


from post to "morecontent"
------------------------------------

can have different levels of layouts
started with "wrapper"
wrapper.html


created some scaffolding/skeleton html:
------------------------
<html>

<head>
    <meta charset="UTF-8">
</head>
<body>
    Wrapper <br>
    {{ content }}
    <br> Wrapper
    
</body>
</html>
----------------------------

then back in the post.html file

change the layout line to "post" again
essentially embedding one layout around another
which is the definition of wrapper so ya, good term

back in page.html
change front matter layout line to wrapper as well
will just use the skeleton
along side the sub layouts

other things can be done with the {{}} braces like using other variables
and "looping through data"

------------------------------------------------------

tutorial part 13: variables in jekyll


data that be accessed in jekyll pages

in the post layout can access different information and pages

example is the content in post

in front matter can define different variables
like author
author: tildes

can use {{layout.(name of variable)}}

like {{layout.author}}
would only work for content in layout

would also work for other data
for instance to access the "title" of front matter
in post.html
can change the h1 line to refer to a varialbe instead of a actual string for a title:
{{  page.title }}
Indeed, instead of saying "this is a post" it changed to "welcome to jekyll"
also it had what i had set the author line to in the front matter ("Tildes")

in the actual post file like 2019-02-21-welcome-to-jekyll.markdown
the title can be changed in the front matter

If I were to change the layout.author variable in post.html
to page.author
it would get that value from the front matter of the 
2019-02-21-welcome-to-jekyll.markdown
file rather than the layout file which in this case is post.html

can also access varialbes about site
post layout uses wrapper layout
in the title tag of wrapper.html file
i can use the braces variable, as in:
{{ site.title }}

putting this into the wrapper.html will make it refer to the value
over in the _config.yml file

these are "site level varialbes"

he refers to
https://jekyllrb.com/docs/variables/
for further exploration of different varieties of accessible variables

------------------------------------------------------

tutorial part 14: Includes


I created a _includes folder
then a "header.html" file in the folder

then used this:
<h1> {{ site.title }} </h1>
<hr>

which is supposed to get the title from the _config.yml file

then in the wrapper.html file
in the body tag but above the {{ content }} tag
put in:
{% include header.html %}
which doesn't syntax highlight
and also don't put space between the { and the %
that part is important
and indeed all the pages have the "your awesome title"

can also pass information the the includes

for instance the line in wrapper HTML to this
    {% include header.html color="blue"  %}

then that information can be accessed in the header html
by modifying the h1 tag:
<h1 style="color: {{  include.color }}">

for whatever reason this doesn't seem to work on the title page
or maybe it's not supposed to work on the title page
it does color the titles on the post pages though
it makes sense this only affects the pages with the post layout specified actually

------------------------------------------------------

tutorial part 15: Looping through pages

for navigation list or just showing different content options

starting with the "home.html" page in the layouts diretory:

use for looping
{% for post in site.posts %}
  {{ post.title }} <br>
{% endfor %}

this changes the main page of index.md to only show a list of the different 
pages with layout post, currently:
Another Post For Me 
New Title 
Welcome to my newest blog 

i can access any variables this way, such as URLs with
post.url
which shows me:
/2019/02/23/another-post-for-me.html 
/jekyll/update/2019/02/21/welcome-to-jekyll.html 
/jekyll/glob/entry/2019/01/28/first-example-blogpost.html 

could use a combo of this for something of a basic navigation list:
{% for post in site.posts %}
<li><a href="{{ post.url }}">{{post.title}}</a></li>
  
{% endfor %}

could also change the for loop to site.pages instead to see a list of the page layout
pages. or the ones that have a dot-title anyway.

------------------------------------------------------

tutorial part 16: Conditionals

starting on the post.html file in the _layouts folder
start with 
{% if [condition here] %}

{% if page.title == "Welcome to my newest blog" %}
  This is the first post
{% endif %}

i used this in the posts.htnl:
{% if page.title == "Welcome to my newest blog" %}
  This is the first post
{% endif %}
and indeed it showed that text

can also use elseif:
{% elsif page.title == "New Title" %}
  This is the jekyll welcome page.
{% endif %}

note: it's "elsif". note the lack of the ending 'e'. elsif.

final option ise just {% else %}

in addition can also use bolean logic with and/or conditionals
just using the word "and" and "or"

combine this with for-loop to create basic navigation list:

{% for post in site.posts %}
    <li><a href="{{ post.url}}">{{ page.title }}</a></li>
{% endfor %}

can also use an inline style with this. This example shows the page
currently on as red text


{% for post in site.posts %}
    <li><a style="{% if page.url == post.url %}color:red;{% endif %}" href="{{ post.url}}">{{ page.title }}</a></li>
{% endfor %}

------------------------------------------------------

tutorial part 17: data files

like "mini databases"

would be stored as json, yaml or csv

start with folder like
_data

created a "people.yml" file under it

in the yml file, created some dummy data. This YML file has to spaced exactly and 
using spaces not tabs. Took a minute to get this right:

   - name: "tildes"
     occupation: "jekyll student"

   - name: "Steve"
     occupation: "Firefighter"

   - name: "Rob"
     occupation: "Programmer"

over in home.html:

{{ site.data.people }}

can also loop this data:
{% for person in site.data.people %}
  {{ person.name }}, {{person.occupation}} <br>
{% endfor %}

this outputted:
tildes, jekyll student 
Steve, Firefighter 
Rob, Programmer 

------------------------------------------------------

tutorial part 18: static files

a "static file" is any file stored on site that is not going to have
front matter

examples are PNGs, JPGs and PDFs

To loop through at all the static files, you could do something like
use a for-loop to get through all the pages in home.html for instance:

{% for file in site.static_files %}
{% endfor %}
------
static_files doesn't care where in directory structure this static files 
are located.

can also access the "full name" of the file with file.name 
or basename for file.basename
file.extname
to show the files

can actually give these static files frontmatter

for instance storing images in an IMG folder

you can do this by going in to config.yml file
create a new line using:
defaults:
   - scope:
      path: "assets/img" (for instance)
    values:
       image: true
      
I actually just changed my whole defaults section of 
_config.yml
to this:
------
defaults:
  -
    scope:
      path: "assets/img" #(for instance)
      #path: "" # an empty string here means all files in the project
      type: "posts" # previously `post` in Jekyll 2.2.
    values:
      layout: "post"
      image: true

------


with the modified defaults in the _config.yml file, can then 
modify the code in the home.html file with  this information combined
with a img tag:
{% for file in site.static_files %}
  {% if file.image %}
    <img src="{{file.path}}" alt="{file.name}">
  {% endif %}
{% endfor %}
------

This would only access the files with the front matter variables declared
a pdf would be excluded

------------------------------------------------------

tutorial part 19: hosting on github

